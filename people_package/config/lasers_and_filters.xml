<launch>

<node pkg="mux" type="throttle" name="base_scan_throttle" args="3.0 base_scan base_scan_throttled" />
<node pkg="mux" type="throttle" name="tilt_scan_throttle" args="3.0 tilt_scan tilt_scan_throttled" />
<node pkg="mux" type="throttle" name="tilt_scan_filtered_throttle" args="3.0 tilt_scan_filtered tilt_scan_filtered_throttled" />
<node pkg="mux" type="throttle" name="base_scan_marking_throttle" args="3.0 base_scan_marking base_scan_marking_throttled" />

<node pkg="pr2_controller_manager" name="2dnav_pr2_laser_tilt_controller_spawner" type="spawner" args="$(find pr2_experimental_controllers)/laser_tilt/laser_tilt_controller.xml" />
<node pkg="people" type="navstack_tilt_profile.py" args="laser_tilt_controller" name="send_navstack_tilt_profile" />

<!-- Filter for tilt laser shadowing/veiling -->
<node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" machine="three" name="tilt_shadow_filter">
  <rosparam command="load" ns="scan_filters" file="$(find laser_filters)/examples/shadow_filter_example.yaml" />
  <rosparam command="load" ns="cloud_filters" file="$(find laser_filters)/examples/point_cloud_footprint_filter_example.yaml" />
  <param name="scan_topic" value="tilt_scan" />
  <param name="cloud_topic" value="tilt_scan_shadow_filtered" />
  <param name="high_fidelity" value="true" />
</node>

<!-- Filter for tilt laser scans that hit the body of the robot -->
<node pkg="robot_self_filter" type="self_filter" name="tilt_laser_self_filter" respawn="true" output="screen">

  <!-- The topic for the input cloud -->
  <remap from="cloud_in" to="tilt_scan_shadow_filtered" />

  <!-- The topic for the output cloud -->
  <remap from="cloud_out" to="tilt_scan_filtered" />

  <!-- The frame of the sensor used to obtain the data to be
    filtered; This parameter is optional. If it is not specified,
    shadow points will be considered outside -->
  <param name="sensor_frame" type="string" value="laser_tilt_link" />

  <!-- Minimum distance to sensor (for point not to be considered inside) -->
  <param name="min_sensor_dist" type="double" value="0.01" />

  <!-- The padding to be added for the body parts the robot can see -->
  <param name="self_see_padd" type="double" value="0.05" />

  <!-- The scaling to be added for the body parts the robot can see -->
  <param name="self_see_scale" type="double" value="1.0" />
  
  <!-- The names of the links the sensor can see -->
  <param name="self_see_links" type="string" value="l_upper_arm_link
                l_upper_arm_roll_link
                l_elbow_flex_link
                l_forearm_link
                l_forearm_roll_link
                l_wrist_flex_link
                l_wrist_roll_link
                l_gripper_l_finger_link
                l_gripper_l_finger_tip_link
                l_gripper_r_finger_link
                l_gripper_r_finger_tip_link
                l_shoulder_pan_link
                l_shoulder_lift_link
                r_upper_arm_link
                r_upper_arm_roll_link
                r_elbow_flex_link
                r_forearm_link
                r_forearm_roll_link
                r_wrist_flex_link
                r_wrist_roll_link
                r_gripper_l_finger_link
                r_gripper_l_finger_tip_link
                r_gripper_r_finger_link
                r_gripper_r_finger_tip_link
                r_shoulder_pan_link
                r_shoulder_lift_link
                base_laser_link
                base_link" />
  
</node>

<!-- Filter for base laser shadowing/veiling -->
<node pkg="laser_filters" type="scan_to_cloud_filter_chain" respawn="true" machine="three" name="base_shadow_filter" >
  <rosparam command="load" ns="scan_filters" file="$(find laser_filters)/examples/shadow_filter_example.yaml" />
  <rosparam command="load" ns="cloud_filters" file="$(find laser_filters)/examples/point_cloud_footprint_filter_example.yaml" />
  <param name="scan_topic" value="base_scan" />
  <param name="cloud_topic" value="base_scan_shadow_filtered" />
</node>

<!-- Filter for base laser scans that hit the body of the robot -->
<node pkg="robot_self_filter" type="self_filter" name="base_laser_self_filter" respawn="true" output="screen">

  <!-- The topic for the input cloud -->
  <remap from="cloud_in" to="base_scan_shadow_filtered" />

  <!-- The topic for the output cloud -->
  <remap from="cloud_out" to="base_scan_marking" />

  <!-- The frame of the sensor used to obtain the data to be
    filtered; This parameter is optional. If it is not specified,
    shadow points will be considered outside -->
  <param name="sensor_frame" type="string" value="base_laser_link" />

  <!-- Minimum distance to sensor (for point not to be considered inside) -->
  <param name="min_sensor_dist" type="double" value="0.01" />

  <!-- The padding to be added for the body parts the robot can see -->
  <param name="self_see_padd" type="double" value="0.01" />

  <!-- The scaling to be added for the body parts the robot can see -->
  <param name="self_see_scale" type="double" value="1.0" />
  
  <!-- The names of the links the sensor can see -->
  <param name="self_see_links" type="string" value="l_upper_arm_link
                l_upper_arm_roll_link
                l_elbow_flex_link
                l_forearm_link
                l_forearm_roll_link
                l_wrist_flex_link
                l_wrist_roll_link
                l_gripper_l_finger_link
                l_gripper_l_finger_tip_link
                l_gripper_r_finger_link
                l_gripper_r_finger_tip_link
                l_shoulder_pan_link
                l_shoulder_lift_link
                r_upper_arm_link
                r_upper_arm_roll_link
                r_elbow_flex_link
                r_forearm_link
                r_forearm_roll_link
                r_wrist_flex_link
                r_wrist_roll_link
                r_gripper_l_finger_link
                r_gripper_l_finger_tip_link
                r_gripper_r_finger_link
                r_gripper_r_finger_tip_link
                r_shoulder_pan_link
                r_shoulder_lift_link" />
  
</node>

</launch>
